@model LmsTool.Models.Viewmodels.CreateActivity

<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>



@{
    ViewBag.Title = "Create";
}




@using (Ajax.BeginForm("Create", "activity", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "ModalCreate", OnSuccess = "$('close').click()" }, new { id = Model.ModulId }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="form-group">
            <h4>Skapa en aktivitet för @Html.DisplayFor(model => model.ModulName)</h4>
            <div>Som pågår mellan @Html.DisplayFor(model => model.DisplayModulStart) - @Html.DisplayFor(model => model.DisplayModulEnd)</div>
        </div>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.TypeOfActivity, htmlAttributes: new { @class = "control-label" })

            @Html.EditorFor(model => model.TypeOfActivity, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.TypeOfActivity, "", new { @class = "text-danger" })

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })

            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })

            @Html.TextAreaFor(model => model.Description, 6, 50, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })

        </div>




        <div class="form-group">
            @Html.LabelFor(model => model.ActivityStart, htmlAttributes: new { @class = "control-label" })

            @Html.EditorFor(model => model.ActivityStart, new { htmlAttributes = new { @id = "dt1", @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ActivityStart, "", new { @class = "text-danger" })

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ActivityEnd, htmlAttributes: new { @class = "control-label" })

            @Html.EditorFor(model => model.ActivityEnd, new { htmlAttributes = new { @id = "dt2", @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ActivityEnd, "", new { @class = "text-danger" })

        </div>

        <div class="form-group">
            @Html.HiddenFor(model => model.ModulId)
            @Html.ValidationMessageFor(model => model.ModulId, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.ModulStart)@*, @id = "dt3"*@
            @Html.ValidationMessageFor(model => model.ModulStart, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.ModulEnd)@*, @id = "dt4"*@
            @Html.ValidationMessageFor(model => model.ModulEnd, "", new { @class = "text-danger" })
        </div>


        <div class="form-group">
            <div>
                <input type="submit" value="Lägg till" class="btn btn-success btn-block pull-left" />

            </div>
        </div>
        <div class="hidden" id="startdatehidden">@Model.ModulStart.ToString("yyyy-MM-ddTHH:mm:ss")</div>
    </div>
}




<script>
    $(document).ready(function () {
        //var enddate = $('startdatehidden').text();
        //var enddate2 = new DateTime(enddate);
        var startdate = $('#startdatehidden').val();
        startdate = Date.parse(startdate);
        @*var startdate = new DateTime("@Model.ModulStart.ToString("yyyy-MM-ddTHH:mm:ss")");*@
        //alert(enddate);
            @*var enddate = new DateTime("@Model.ModulEnd.ToString("yyyy-MM-ddTHH:mm:ss")");*@
    $("#dt1").datepicker({
        dateFormat: "yy-mm-dd",
        //defaultDate: startdate,
        //maxDate: startdate,
        //minDate: startdate,
        onSelect: function () {
            @*var startdate = new DateTime("@Model.ModulStart.ToString("yyyy-MM-ddTHH:mm:ss")");
            var enddate = new DateTime("@Model.ModulEnd.ToString("yyyy-MM-ddTHH:mm:ss")");*@
            var dt1 = $('#dt1').datepicker('getDate');
            if (dt1 < startdate)
            {
                $('dt1').datepicker('setDate', startdate);
            }
            //$('#dt1').datepicker('option', 'minDate', startdate);
            //$('#dt2').datepicker('option', 'maxDate', enddate);
            //var date2 = $('#dt1').datepicker('getDate');
            //date2.setHours(8);
            //date2.setDate(date2.getDate() + 1);
            //$('#dt2').datepicker('setDate', date2);
            //$('dt1').datepicker()
            //alert('enddate');
            ////sets minDate to dt1 date + 1
            //$('#dt2').datepicker('option', 'minDate', date2);
        }
    });
    $('#dt2').datepicker({
        //defaultDate: startdate,
        //maxDate: enddate,
        //minDate: startdate,
        dateFormat: "yy-mm-dd",
        onClose: function () {
            var dt1 = $('#dt1').datepicker('getDate');
            if (dt1 < startdate) {
                startdate.setDate(startdate.getDate());
                $('dt1').datepicker('setDate', startdate);
            }
        //    var dt1 = $('#dt1').datepicker('getDate');
        //    var dt2 = $('#dt2').datepicker('getDate');
        //    dt2.setHours(17);
        //    if (dt2 <= dt1) {
        //        var minDate = $('#dt2').datepicker('option', 'minDate');
        //        $('#dt2').datepicker('setDate', minDate);
        //    }
        }
    });
    });

</script>



@*<script>
        $('.modal').on('hidden.bs.modal', function () {
            $(this).removeData('bs.modal').children('.modal-content').html('');
        });
    </script>*@
